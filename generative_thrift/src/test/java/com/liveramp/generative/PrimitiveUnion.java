/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.liveramp.generative;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class PrimitiveUnion extends org.apache.thrift.TUnion<PrimitiveUnion, PrimitiveUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrimitiveUnion");
  private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField I_FIELD_DESC = new org.apache.thrift.protocol.TField("i", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField L_FIELD_DESC = new org.apache.thrift.protocol.TField("l", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("color", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TF_FIELD_DESC = new org.apache.thrift.protocol.TField("tf", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("str", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BIN_FIELD_DESC = new org.apache.thrift.protocol.TField("bin", org.apache.thrift.protocol.TType.STRING, (short)9);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    S((short)1, "s"),
    I((short)2, "i"),
    L((short)3, "l"),
    D((short)4, "d"),
    /**
     * 
     * @see Color
     */
    COLOR((short)5, "color"),
    TF((short)6, "tf"),
    B((short)7, "b"),
    STR((short)8, "str"),
    BIN((short)9, "bin");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // S
          return S;
        case 2: // I
          return I;
        case 3: // L
          return L;
        case 4: // D
          return D;
        case 5: // COLOR
          return COLOR;
        case 6: // TF
          return TF;
        case 7: // B
          return B;
        case 8: // STR
          return STR;
        case 9: // BIN
          return BIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.I, new org.apache.thrift.meta_data.FieldMetaData("i", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.L, new org.apache.thrift.meta_data.FieldMetaData("l", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COLOR, new org.apache.thrift.meta_data.FieldMetaData("color", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Color.class)));
    tmpMap.put(_Fields.TF, new org.apache.thrift.meta_data.FieldMetaData("tf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.STR, new org.apache.thrift.meta_data.FieldMetaData("str", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIN, new org.apache.thrift.meta_data.FieldMetaData("bin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrimitiveUnion.class, metaDataMap);
  }

  public PrimitiveUnion() {
    super();
  }

  public PrimitiveUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public PrimitiveUnion(PrimitiveUnion other) {
    super(other);
  }
  public PrimitiveUnion deepCopy() {
    return new PrimitiveUnion(this);
  }

  public static PrimitiveUnion s(short value) {
    PrimitiveUnion x = new PrimitiveUnion();
    x.set_s(value);
    return x;
  }

  public static PrimitiveUnion i(int value) {
    PrimitiveUnion x = new PrimitiveUnion();
    x.set_i(value);
    return x;
  }

  public static PrimitiveUnion l(long value) {
    PrimitiveUnion x = new PrimitiveUnion();
    x.set_l(value);
    return x;
  }

  public static PrimitiveUnion d(double value) {
    PrimitiveUnion x = new PrimitiveUnion();
    x.set_d(value);
    return x;
  }

  public static PrimitiveUnion color(Color value) {
    PrimitiveUnion x = new PrimitiveUnion();
    x.set_color(value);
    return x;
  }

  public static PrimitiveUnion tf(boolean value) {
    PrimitiveUnion x = new PrimitiveUnion();
    x.set_tf(value);
    return x;
  }

  public static PrimitiveUnion b(byte value) {
    PrimitiveUnion x = new PrimitiveUnion();
    x.set_b(value);
    return x;
  }

  public static PrimitiveUnion str(java.lang.String value) {
    PrimitiveUnion x = new PrimitiveUnion();
    x.set_str(value);
    return x;
  }

  public static PrimitiveUnion bin(java.nio.ByteBuffer value) {
    PrimitiveUnion x = new PrimitiveUnion();
    x.set_bin(value);
    return x;
  }

  public static PrimitiveUnion bin(byte[] value) {
    PrimitiveUnion x = new PrimitiveUnion();
    x.set_bin  (java.nio.ByteBuffer.wrap(value));
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case S:
        if (value instanceof java.lang.Short) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Short for field 's', but got " + value.getClass().getSimpleName());
      case I:
        if (value instanceof java.lang.Integer) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Integer for field 'i', but got " + value.getClass().getSimpleName());
      case L:
        if (value instanceof java.lang.Long) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Long for field 'l', but got " + value.getClass().getSimpleName());
      case D:
        if (value instanceof java.lang.Double) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Double for field 'd', but got " + value.getClass().getSimpleName());
      case COLOR:
        if (value instanceof Color) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type Color for field 'color', but got " + value.getClass().getSimpleName());
      case TF:
        if (value instanceof java.lang.Boolean) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Boolean for field 'tf', but got " + value.getClass().getSimpleName());
      case B:
        if (value instanceof java.lang.Byte) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Byte for field 'b', but got " + value.getClass().getSimpleName());
      case STR:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'str', but got " + value.getClass().getSimpleName());
      case BIN:
        if (value instanceof java.nio.ByteBuffer) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.nio.ByteBuffer for field 'bin', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case S:
          if (field.type == S_FIELD_DESC.type) {
            java.lang.Short s;
            s = iprot.readI16();
            return s;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I:
          if (field.type == I_FIELD_DESC.type) {
            java.lang.Integer i;
            i = iprot.readI32();
            return i;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case L:
          if (field.type == L_FIELD_DESC.type) {
            java.lang.Long l;
            l = iprot.readI64();
            return l;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case D:
          if (field.type == D_FIELD_DESC.type) {
            java.lang.Double d;
            d = iprot.readDouble();
            return d;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case COLOR:
          if (field.type == COLOR_FIELD_DESC.type) {
            Color color;
            color = com.liveramp.generative.Color.findByValue(iprot.readI32());
            return color;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TF:
          if (field.type == TF_FIELD_DESC.type) {
            java.lang.Boolean tf;
            tf = iprot.readBool();
            return tf;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case B:
          if (field.type == B_FIELD_DESC.type) {
            java.lang.Byte b;
            b = iprot.readByte();
            return b;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STR:
          if (field.type == STR_FIELD_DESC.type) {
            java.lang.String str;
            str = iprot.readString();
            return str;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BIN:
          if (field.type == BIN_FIELD_DESC.type) {
            java.nio.ByteBuffer bin;
            bin = iprot.readBinary();
            return bin;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case S:
        java.lang.Short s = (java.lang.Short)value_;
        oprot.writeI16(s);
        return;
      case I:
        java.lang.Integer i = (java.lang.Integer)value_;
        oprot.writeI32(i);
        return;
      case L:
        java.lang.Long l = (java.lang.Long)value_;
        oprot.writeI64(l);
        return;
      case D:
        java.lang.Double d = (java.lang.Double)value_;
        oprot.writeDouble(d);
        return;
      case COLOR:
        Color color = (Color)value_;
        oprot.writeI32(color.getValue());
        return;
      case TF:
        java.lang.Boolean tf = (java.lang.Boolean)value_;
        oprot.writeBool(tf);
        return;
      case B:
        java.lang.Byte b = (java.lang.Byte)value_;
        oprot.writeByte(b);
        return;
      case STR:
        java.lang.String str = (java.lang.String)value_;
        oprot.writeString(str);
        return;
      case BIN:
        java.nio.ByteBuffer bin = (java.nio.ByteBuffer)value_;
        oprot.writeBinary(bin);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case S:
          java.lang.Short s;
          s = iprot.readI16();
          return s;
        case I:
          java.lang.Integer i;
          i = iprot.readI32();
          return i;
        case L:
          java.lang.Long l;
          l = iprot.readI64();
          return l;
        case D:
          java.lang.Double d;
          d = iprot.readDouble();
          return d;
        case COLOR:
          Color color;
          color = com.liveramp.generative.Color.findByValue(iprot.readI32());
          return color;
        case TF:
          java.lang.Boolean tf;
          tf = iprot.readBool();
          return tf;
        case B:
          java.lang.Byte b;
          b = iprot.readByte();
          return b;
        case STR:
          java.lang.String str;
          str = iprot.readString();
          return str;
        case BIN:
          java.nio.ByteBuffer bin;
          bin = iprot.readBinary();
          return bin;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case S:
        java.lang.Short s = (java.lang.Short)value_;
        oprot.writeI16(s);
        return;
      case I:
        java.lang.Integer i = (java.lang.Integer)value_;
        oprot.writeI32(i);
        return;
      case L:
        java.lang.Long l = (java.lang.Long)value_;
        oprot.writeI64(l);
        return;
      case D:
        java.lang.Double d = (java.lang.Double)value_;
        oprot.writeDouble(d);
        return;
      case COLOR:
        Color color = (Color)value_;
        oprot.writeI32(color.getValue());
        return;
      case TF:
        java.lang.Boolean tf = (java.lang.Boolean)value_;
        oprot.writeBool(tf);
        return;
      case B:
        java.lang.Byte b = (java.lang.Byte)value_;
        oprot.writeByte(b);
        return;
      case STR:
        java.lang.String str = (java.lang.String)value_;
        oprot.writeString(str);
        return;
      case BIN:
        java.nio.ByteBuffer bin = (java.nio.ByteBuffer)value_;
        oprot.writeBinary(bin);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case S:
        return S_FIELD_DESC;
      case I:
        return I_FIELD_DESC;
      case L:
        return L_FIELD_DESC;
      case D:
        return D_FIELD_DESC;
      case COLOR:
        return COLOR_FIELD_DESC;
      case TF:
        return TF_FIELD_DESC;
      case B:
        return B_FIELD_DESC;
      case STR:
        return STR_FIELD_DESC;
      case BIN:
        return BIN_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public short get_s() {
    if (getSetField() == _Fields.S) {
      return (java.lang.Short)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 's' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_s(short value) {
    setField_ = _Fields.S;
    value_ = value;
  }

  public int get_i() {
    if (getSetField() == _Fields.I) {
      return (java.lang.Integer)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'i' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_i(int value) {
    setField_ = _Fields.I;
    value_ = value;
  }

  public long get_l() {
    if (getSetField() == _Fields.L) {
      return (java.lang.Long)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'l' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_l(long value) {
    setField_ = _Fields.L;
    value_ = value;
  }

  public double get_d() {
    if (getSetField() == _Fields.D) {
      return (java.lang.Double)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'd' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_d(double value) {
    setField_ = _Fields.D;
    value_ = value;
  }

  /**
   * 
   * @see Color
   */
  public Color get_color() {
    if (getSetField() == _Fields.COLOR) {
      return (Color)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'color' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * 
   * @see Color
   */
  public void set_color(Color value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.COLOR;
    value_ = value;
  }

  public boolean get_tf() {
    if (getSetField() == _Fields.TF) {
      return (java.lang.Boolean)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'tf' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_tf(boolean value) {
    setField_ = _Fields.TF;
    value_ = value;
  }

  public byte get_b() {
    if (getSetField() == _Fields.B) {
      return (java.lang.Byte)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'b' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_b(byte value) {
    setField_ = _Fields.B;
    value_ = value;
  }

  public java.lang.String get_str() {
    if (getSetField() == _Fields.STR) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'str' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_str(java.lang.String value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STR;
    value_ = value;
  }

  public byte[] get_bin() {
    set_bin(org.apache.thrift.TBaseHelper.rightSize(buffer_for_bin()));
    java.nio.ByteBuffer b = buffer_for_bin();
    return b == null ? null : b.array();
  }

  public java.nio.ByteBuffer buffer_for_bin() {
    if (getSetField() == _Fields.BIN) {
      return (java.nio.ByteBuffer)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'bin' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_bin(byte[] value) {
    set_bin  (java.nio.ByteBuffer.wrap(value));
  }

  public void set_bin(java.nio.ByteBuffer value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.BIN;
    value_ = value;
  }

  public boolean is_set_s() {
    return setField_ == _Fields.S;
  }


  public boolean is_set_i() {
    return setField_ == _Fields.I;
  }


  public boolean is_set_l() {
    return setField_ == _Fields.L;
  }


  public boolean is_set_d() {
    return setField_ == _Fields.D;
  }


  public boolean is_set_color() {
    return setField_ == _Fields.COLOR;
  }


  public boolean is_set_tf() {
    return setField_ == _Fields.TF;
  }


  public boolean is_set_b() {
    return setField_ == _Fields.B;
  }


  public boolean is_set_str() {
    return setField_ == _Fields.STR;
  }


  public boolean is_set_bin() {
    return setField_ == _Fields.BIN;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof PrimitiveUnion) {
      return equals((PrimitiveUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(PrimitiveUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(PrimitiveUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
