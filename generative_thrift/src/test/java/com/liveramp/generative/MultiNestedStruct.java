/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.liveramp.generative;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-10-03")
public class MultiNestedStruct implements org.apache.thrift.TBase<MultiNestedStruct, MultiNestedStruct._Fields>, java.io.Serializable, Cloneable, Comparable<MultiNestedStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MultiNestedStruct");

  private static final org.apache.thrift.protocol.TField STRCT_FIELD_DESC = new org.apache.thrift.protocol.TField("strct", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField U_FIELD_DESC = new org.apache.thrift.protocol.TField("u", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MultiNestedStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MultiNestedStructTupleSchemeFactory();

  private PrimitiveStruct strct; // optional
  private PrimitiveUnion u; // required
  private long id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRCT((short)1, "strct"),
    U((short)2, "u"),
    ID((short)3, "id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRCT
          return STRCT;
        case 2: // U
          return U;
        case 3: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STRCT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRCT, new org.apache.thrift.meta_data.FieldMetaData("strct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrimitiveStruct.class)));
    tmpMap.put(_Fields.U, new org.apache.thrift.meta_data.FieldMetaData("u", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrimitiveUnion.class)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MultiNestedStruct.class, metaDataMap);
  }

  public MultiNestedStruct() {
  }

  public MultiNestedStruct(
    PrimitiveUnion u,
    long id)
  {
    this();
    this.u = u;
    this.id = id;
    set_id_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MultiNestedStruct(MultiNestedStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_strct()) {
      this.strct = new PrimitiveStruct(other.strct);
    }
    if (other.is_set_u()) {
      this.u = new PrimitiveUnion(other.u);
    }
    this.id = other.id;
  }

  public MultiNestedStruct deepCopy() {
    return new MultiNestedStruct(this);
  }

  @Override
  public void clear() {
    this.strct = null;
    this.u = null;
    set_id_isSet(false);
    this.id = 0;
  }

  public PrimitiveStruct get_strct() {
    return this.strct;
  }

  public MultiNestedStruct set_strct(PrimitiveStruct strct) {
    this.strct = strct;
    return this;
  }

  public void unset_strct() {
    this.strct = null;
  }

  /** Returns true if field strct is set (has been assigned a value) and false otherwise */
  public boolean is_set_strct() {
    return this.strct != null;
  }

  public void set_strct_isSet(boolean value) {
    if (!value) {
      this.strct = null;
    }
  }

  public PrimitiveUnion get_u() {
    return this.u;
  }

  public MultiNestedStruct set_u(PrimitiveUnion u) {
    this.u = u;
    return this;
  }

  public void unset_u() {
    this.u = null;
  }

  /** Returns true if field u is set (has been assigned a value) and false otherwise */
  public boolean is_set_u() {
    return this.u != null;
  }

  public void set_u_isSet(boolean value) {
    if (!value) {
      this.u = null;
    }
  }

  public long get_id() {
    return this.id;
  }

  public MultiNestedStruct set_id(long id) {
    this.id = id;
    set_id_isSet(true);
    return this;
  }

  public void unset_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean is_set_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void set_id_isSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case STRCT:
      if (value == null) {
        unset_strct();
      } else {
        set_strct((PrimitiveStruct)value);
      }
      break;

    case U:
      if (value == null) {
        unset_u();
      } else {
        set_u((PrimitiveUnion)value);
      }
      break;

    case ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STRCT:
      return get_strct();

    case U:
      return get_u();

    case ID:
      return get_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STRCT:
      return is_set_strct();
    case U:
      return is_set_u();
    case ID:
      return is_set_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MultiNestedStruct)
      return this.equals((MultiNestedStruct)that);
    return false;
  }

  public boolean equals(MultiNestedStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_strct = true && this.is_set_strct();
    boolean that_present_strct = true && that.is_set_strct();
    if (this_present_strct || that_present_strct) {
      if (!(this_present_strct && that_present_strct))
        return false;
      if (!this.strct.equals(that.strct))
        return false;
    }

    boolean this_present_u = true && this.is_set_u();
    boolean that_present_u = true && that.is_set_u();
    if (this_present_u || that_present_u) {
      if (!(this_present_u && that_present_u))
        return false;
      if (!this.u.equals(that.u))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((is_set_strct()) ? 131071 : 524287);
    if (is_set_strct())
      hashCode = hashCode * 8191 + strct.hashCode();

    hashCode = hashCode * 8191 + ((is_set_u()) ? 131071 : 524287);
    if (is_set_u())
      hashCode = hashCode * 8191 + u.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    return hashCode;
  }

  @Override
  public int compareTo(MultiNestedStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(is_set_strct()).compareTo(other.is_set_strct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_strct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strct, other.strct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_u()).compareTo(other.is_set_u());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_u()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.u, other.u);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_id()).compareTo(other.is_set_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MultiNestedStruct(");
    boolean first = true;

    if (is_set_strct()) {
      sb.append("strct:");
      if (this.strct == null) {
        sb.append("null");
      } else {
        sb.append(this.strct);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("u:");
    if (this.u == null) {
      sb.append("null");
    } else {
      sb.append(this.u);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (u == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'u' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (strct != null) {
      strct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MultiNestedStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MultiNestedStructStandardScheme getScheme() {
      return new MultiNestedStructStandardScheme();
    }
  }

  private static class MultiNestedStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<MultiNestedStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MultiNestedStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.strct = new PrimitiveStruct();
              struct.strct.read(iprot);
              struct.set_strct_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // U
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.u = new PrimitiveUnion();
              struct.u.read(iprot);
              struct.set_u_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.set_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MultiNestedStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.strct != null) {
        if (struct.is_set_strct()) {
          oprot.writeFieldBegin(STRCT_FIELD_DESC);
          struct.strct.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.u != null) {
        oprot.writeFieldBegin(U_FIELD_DESC);
        struct.u.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MultiNestedStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MultiNestedStructTupleScheme getScheme() {
      return new MultiNestedStructTupleScheme();
    }
  }

  private static class MultiNestedStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<MultiNestedStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MultiNestedStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.u.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.is_set_strct()) {
        optionals.set(0);
      }
      if (struct.is_set_id()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.is_set_strct()) {
        struct.strct.write(oprot);
      }
      if (struct.is_set_id()) {
        oprot.writeI64(struct.id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MultiNestedStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.u = new PrimitiveUnion();
      struct.u.read(iprot);
      struct.set_u_isSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.strct = new PrimitiveStruct();
        struct.strct.read(iprot);
        struct.set_strct_isSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readI64();
        struct.set_id_isSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

