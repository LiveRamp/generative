/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.liveramp.generative;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-10-04")
public class PrimitiveStruct implements org.apache.thrift.TBase<PrimitiveStruct, PrimitiveStruct._Fields>, java.io.Serializable, Cloneable, Comparable<PrimitiveStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrimitiveStruct");

  private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField I_FIELD_DESC = new org.apache.thrift.protocol.TField("i", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField L_FIELD_DESC = new org.apache.thrift.protocol.TField("l", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("color", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TF_FIELD_DESC = new org.apache.thrift.protocol.TField("tf", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("str", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BIN_FIELD_DESC = new org.apache.thrift.protocol.TField("bin", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PrimitiveStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PrimitiveStructTupleSchemeFactory();

  private short s; // optional
  private int i; // optional
  private long l; // optional
  private double d; // optional
  private Color color; // optional
  private boolean tf; // optional
  private byte b; // optional
  private java.lang.String str; // optional
  private java.nio.ByteBuffer bin; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    S((short)1, "s"),
    I((short)2, "i"),
    L((short)3, "l"),
    D((short)4, "d"),
    /**
     * 
     * @see Color
     */
    COLOR((short)5, "color"),
    TF((short)6, "tf"),
    B((short)7, "b"),
    STR((short)8, "str"),
    BIN((short)9, "bin");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // S
          return S;
        case 2: // I
          return I;
        case 3: // L
          return L;
        case 4: // D
          return D;
        case 5: // COLOR
          return COLOR;
        case 6: // TF
          return TF;
        case 7: // B
          return B;
        case 8: // STR
          return STR;
        case 9: // BIN
          return BIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __S_ISSET_ID = 0;
  private static final int __I_ISSET_ID = 1;
  private static final int __L_ISSET_ID = 2;
  private static final int __D_ISSET_ID = 3;
  private static final int __TF_ISSET_ID = 4;
  private static final int __B_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.S,_Fields.I,_Fields.L,_Fields.D,_Fields.COLOR,_Fields.TF,_Fields.B,_Fields.STR,_Fields.BIN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.I, new org.apache.thrift.meta_data.FieldMetaData("i", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.L, new org.apache.thrift.meta_data.FieldMetaData("l", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COLOR, new org.apache.thrift.meta_data.FieldMetaData("color", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Color.class)));
    tmpMap.put(_Fields.TF, new org.apache.thrift.meta_data.FieldMetaData("tf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.STR, new org.apache.thrift.meta_data.FieldMetaData("str", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIN, new org.apache.thrift.meta_data.FieldMetaData("bin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrimitiveStruct.class, metaDataMap);
  }

  public PrimitiveStruct() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrimitiveStruct(PrimitiveStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.s = other.s;
    this.i = other.i;
    this.l = other.l;
    this.d = other.d;
    if (other.is_set_color()) {
      this.color = other.color;
    }
    this.tf = other.tf;
    this.b = other.b;
    if (other.is_set_str()) {
      this.str = other.str;
    }
    if (other.is_set_bin()) {
      this.bin = org.apache.thrift.TBaseHelper.copyBinary(other.bin);
    }
  }

  public PrimitiveStruct deepCopy() {
    return new PrimitiveStruct(this);
  }

  @Override
  public void clear() {
    set_s_isSet(false);
    this.s = 0;
    set_i_isSet(false);
    this.i = 0;
    set_l_isSet(false);
    this.l = 0;
    set_d_isSet(false);
    this.d = 0.0;
    this.color = null;
    set_tf_isSet(false);
    this.tf = false;
    set_b_isSet(false);
    this.b = 0;
    this.str = null;
    this.bin = null;
  }

  public short get_s() {
    return this.s;
  }

  public PrimitiveStruct set_s(short s) {
    this.s = s;
    set_s_isSet(true);
    return this;
  }

  public void unset_s() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __S_ISSET_ID);
  }

  /** Returns true if field s is set (has been assigned a value) and false otherwise */
  public boolean is_set_s() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __S_ISSET_ID);
  }

  public void set_s_isSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __S_ISSET_ID, value);
  }

  public int get_i() {
    return this.i;
  }

  public PrimitiveStruct set_i(int i) {
    this.i = i;
    set_i_isSet(true);
    return this;
  }

  public void unset_i() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I_ISSET_ID);
  }

  /** Returns true if field i is set (has been assigned a value) and false otherwise */
  public boolean is_set_i() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I_ISSET_ID);
  }

  public void set_i_isSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I_ISSET_ID, value);
  }

  public long get_l() {
    return this.l;
  }

  public PrimitiveStruct set_l(long l) {
    this.l = l;
    set_l_isSet(true);
    return this;
  }

  public void unset_l() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __L_ISSET_ID);
  }

  /** Returns true if field l is set (has been assigned a value) and false otherwise */
  public boolean is_set_l() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __L_ISSET_ID);
  }

  public void set_l_isSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __L_ISSET_ID, value);
  }

  public double get_d() {
    return this.d;
  }

  public PrimitiveStruct set_d(double d) {
    this.d = d;
    set_d_isSet(true);
    return this;
  }

  public void unset_d() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __D_ISSET_ID);
  }

  /** Returns true if field d is set (has been assigned a value) and false otherwise */
  public boolean is_set_d() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __D_ISSET_ID);
  }

  public void set_d_isSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __D_ISSET_ID, value);
  }

  /**
   * 
   * @see Color
   */
  public Color get_color() {
    return this.color;
  }

  /**
   * 
   * @see Color
   */
  public PrimitiveStruct set_color(Color color) {
    this.color = color;
    return this;
  }

  public void unset_color() {
    this.color = null;
  }

  /** Returns true if field color is set (has been assigned a value) and false otherwise */
  public boolean is_set_color() {
    return this.color != null;
  }

  public void set_color_isSet(boolean value) {
    if (!value) {
      this.color = null;
    }
  }

  public boolean is_tf() {
    return this.tf;
  }

  public PrimitiveStruct set_tf(boolean tf) {
    this.tf = tf;
    set_tf_isSet(true);
    return this;
  }

  public void unset_tf() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TF_ISSET_ID);
  }

  /** Returns true if field tf is set (has been assigned a value) and false otherwise */
  public boolean is_set_tf() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TF_ISSET_ID);
  }

  public void set_tf_isSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TF_ISSET_ID, value);
  }

  public byte get_b() {
    return this.b;
  }

  public PrimitiveStruct set_b(byte b) {
    this.b = b;
    set_b_isSet(true);
    return this;
  }

  public void unset_b() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __B_ISSET_ID);
  }

  /** Returns true if field b is set (has been assigned a value) and false otherwise */
  public boolean is_set_b() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __B_ISSET_ID);
  }

  public void set_b_isSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __B_ISSET_ID, value);
  }

  public java.lang.String get_str() {
    return this.str;
  }

  public PrimitiveStruct set_str(java.lang.String str) {
    this.str = str;
    return this;
  }

  public void unset_str() {
    this.str = null;
  }

  /** Returns true if field str is set (has been assigned a value) and false otherwise */
  public boolean is_set_str() {
    return this.str != null;
  }

  public void set_str_isSet(boolean value) {
    if (!value) {
      this.str = null;
    }
  }

  public byte[] get_bin() {
    set_bin(org.apache.thrift.TBaseHelper.rightSize(bin));
    return bin == null ? null : bin.array();
  }

  public java.nio.ByteBuffer buffer_for_bin() {
    return bin;
  }

  public PrimitiveStruct set_bin(byte[] bin) {
    this.bin = bin == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(bin);
    return this;
  }

  public PrimitiveStruct set_bin(java.nio.ByteBuffer bin) {
    this.bin = bin;
    return this;
  }

  public void unset_bin() {
    this.bin = null;
  }

  /** Returns true if field bin is set (has been assigned a value) and false otherwise */
  public boolean is_set_bin() {
    return this.bin != null;
  }

  public void set_bin_isSet(boolean value) {
    if (!value) {
      this.bin = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case S:
      if (value == null) {
        unset_s();
      } else {
        set_s((java.lang.Short)value);
      }
      break;

    case I:
      if (value == null) {
        unset_i();
      } else {
        set_i((java.lang.Integer)value);
      }
      break;

    case L:
      if (value == null) {
        unset_l();
      } else {
        set_l((java.lang.Long)value);
      }
      break;

    case D:
      if (value == null) {
        unset_d();
      } else {
        set_d((java.lang.Double)value);
      }
      break;

    case COLOR:
      if (value == null) {
        unset_color();
      } else {
        set_color((Color)value);
      }
      break;

    case TF:
      if (value == null) {
        unset_tf();
      } else {
        set_tf((java.lang.Boolean)value);
      }
      break;

    case B:
      if (value == null) {
        unset_b();
      } else {
        set_b((java.lang.Byte)value);
      }
      break;

    case STR:
      if (value == null) {
        unset_str();
      } else {
        set_str((java.lang.String)value);
      }
      break;

    case BIN:
      if (value == null) {
        unset_bin();
      } else {
        if (value instanceof byte[]) {
          set_bin((byte[])value);
        } else {
          set_bin((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case S:
      return get_s();

    case I:
      return get_i();

    case L:
      return get_l();

    case D:
      return get_d();

    case COLOR:
      return get_color();

    case TF:
      return is_tf();

    case B:
      return get_b();

    case STR:
      return get_str();

    case BIN:
      return get_bin();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case S:
      return is_set_s();
    case I:
      return is_set_i();
    case L:
      return is_set_l();
    case D:
      return is_set_d();
    case COLOR:
      return is_set_color();
    case TF:
      return is_set_tf();
    case B:
      return is_set_b();
    case STR:
      return is_set_str();
    case BIN:
      return is_set_bin();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PrimitiveStruct)
      return this.equals((PrimitiveStruct)that);
    return false;
  }

  public boolean equals(PrimitiveStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_s = true && this.is_set_s();
    boolean that_present_s = true && that.is_set_s();
    if (this_present_s || that_present_s) {
      if (!(this_present_s && that_present_s))
        return false;
      if (this.s != that.s)
        return false;
    }

    boolean this_present_i = true && this.is_set_i();
    boolean that_present_i = true && that.is_set_i();
    if (this_present_i || that_present_i) {
      if (!(this_present_i && that_present_i))
        return false;
      if (this.i != that.i)
        return false;
    }

    boolean this_present_l = true && this.is_set_l();
    boolean that_present_l = true && that.is_set_l();
    if (this_present_l || that_present_l) {
      if (!(this_present_l && that_present_l))
        return false;
      if (this.l != that.l)
        return false;
    }

    boolean this_present_d = true && this.is_set_d();
    boolean that_present_d = true && that.is_set_d();
    if (this_present_d || that_present_d) {
      if (!(this_present_d && that_present_d))
        return false;
      if (this.d != that.d)
        return false;
    }

    boolean this_present_color = true && this.is_set_color();
    boolean that_present_color = true && that.is_set_color();
    if (this_present_color || that_present_color) {
      if (!(this_present_color && that_present_color))
        return false;
      if (!this.color.equals(that.color))
        return false;
    }

    boolean this_present_tf = true && this.is_set_tf();
    boolean that_present_tf = true && that.is_set_tf();
    if (this_present_tf || that_present_tf) {
      if (!(this_present_tf && that_present_tf))
        return false;
      if (this.tf != that.tf)
        return false;
    }

    boolean this_present_b = true && this.is_set_b();
    boolean that_present_b = true && that.is_set_b();
    if (this_present_b || that_present_b) {
      if (!(this_present_b && that_present_b))
        return false;
      if (this.b != that.b)
        return false;
    }

    boolean this_present_str = true && this.is_set_str();
    boolean that_present_str = true && that.is_set_str();
    if (this_present_str || that_present_str) {
      if (!(this_present_str && that_present_str))
        return false;
      if (!this.str.equals(that.str))
        return false;
    }

    boolean this_present_bin = true && this.is_set_bin();
    boolean that_present_bin = true && that.is_set_bin();
    if (this_present_bin || that_present_bin) {
      if (!(this_present_bin && that_present_bin))
        return false;
      if (!this.bin.equals(that.bin))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((is_set_s()) ? 131071 : 524287);
    if (is_set_s())
      hashCode = hashCode * 8191 + s;

    hashCode = hashCode * 8191 + ((is_set_i()) ? 131071 : 524287);
    if (is_set_i())
      hashCode = hashCode * 8191 + i;

    hashCode = hashCode * 8191 + ((is_set_l()) ? 131071 : 524287);
    if (is_set_l())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(l);

    hashCode = hashCode * 8191 + ((is_set_d()) ? 131071 : 524287);
    if (is_set_d())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(d);

    hashCode = hashCode * 8191 + ((is_set_color()) ? 131071 : 524287);
    if (is_set_color())
      hashCode = hashCode * 8191 + color.getValue();

    hashCode = hashCode * 8191 + ((is_set_tf()) ? 131071 : 524287);
    if (is_set_tf())
      hashCode = hashCode * 8191 + ((tf) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((is_set_b()) ? 131071 : 524287);
    if (is_set_b())
      hashCode = hashCode * 8191 + (int) (b);

    hashCode = hashCode * 8191 + ((is_set_str()) ? 131071 : 524287);
    if (is_set_str())
      hashCode = hashCode * 8191 + str.hashCode();

    hashCode = hashCode * 8191 + ((is_set_bin()) ? 131071 : 524287);
    if (is_set_bin())
      hashCode = hashCode * 8191 + bin.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PrimitiveStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(is_set_s()).compareTo(other.is_set_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_i()).compareTo(other.is_set_i());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_i()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i, other.i);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_l()).compareTo(other.is_set_l());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_l()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l, other.l);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_d()).compareTo(other.is_set_d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_color()).compareTo(other.is_set_color());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_color()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.color, other.color);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_tf()).compareTo(other.is_set_tf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_tf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tf, other.tf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_b()).compareTo(other.is_set_b());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_b()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_str()).compareTo(other.is_set_str());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_str()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str, other.str);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_bin()).compareTo(other.is_set_bin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_bin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bin, other.bin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PrimitiveStruct(");
    boolean first = true;

    if (is_set_s()) {
      sb.append("s:");
      sb.append(this.s);
      first = false;
    }
    if (is_set_i()) {
      if (!first) sb.append(", ");
      sb.append("i:");
      sb.append(this.i);
      first = false;
    }
    if (is_set_l()) {
      if (!first) sb.append(", ");
      sb.append("l:");
      sb.append(this.l);
      first = false;
    }
    if (is_set_d()) {
      if (!first) sb.append(", ");
      sb.append("d:");
      sb.append(this.d);
      first = false;
    }
    if (is_set_color()) {
      if (!first) sb.append(", ");
      sb.append("color:");
      if (this.color == null) {
        sb.append("null");
      } else {
        sb.append(this.color);
      }
      first = false;
    }
    if (is_set_tf()) {
      if (!first) sb.append(", ");
      sb.append("tf:");
      sb.append(this.tf);
      first = false;
    }
    if (is_set_b()) {
      if (!first) sb.append(", ");
      sb.append("b:");
      sb.append(this.b);
      first = false;
    }
    if (is_set_str()) {
      if (!first) sb.append(", ");
      sb.append("str:");
      if (this.str == null) {
        sb.append("null");
      } else {
        sb.append(this.str);
      }
      first = false;
    }
    if (is_set_bin()) {
      if (!first) sb.append(", ");
      sb.append("bin:");
      if (this.bin == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.bin, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrimitiveStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PrimitiveStructStandardScheme getScheme() {
      return new PrimitiveStructStandardScheme();
    }
  }

  private static class PrimitiveStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<PrimitiveStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PrimitiveStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // S
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.s = iprot.readI16();
              struct.set_s_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // I
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i = iprot.readI32();
              struct.set_i_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // L
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.l = iprot.readI64();
              struct.set_l_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.d = iprot.readDouble();
              struct.set_d_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.color = com.liveramp.generative.Color.findByValue(iprot.readI32());
              struct.set_color_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TF
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.tf = iprot.readBool();
              struct.set_tf_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // B
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.b = iprot.readByte();
              struct.set_b_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str = iprot.readString();
              struct.set_str_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bin = iprot.readBinary();
              struct.set_bin_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PrimitiveStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.is_set_s()) {
        oprot.writeFieldBegin(S_FIELD_DESC);
        oprot.writeI16(struct.s);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_i()) {
        oprot.writeFieldBegin(I_FIELD_DESC);
        oprot.writeI32(struct.i);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_l()) {
        oprot.writeFieldBegin(L_FIELD_DESC);
        oprot.writeI64(struct.l);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_d()) {
        oprot.writeFieldBegin(D_FIELD_DESC);
        oprot.writeDouble(struct.d);
        oprot.writeFieldEnd();
      }
      if (struct.color != null) {
        if (struct.is_set_color()) {
          oprot.writeFieldBegin(COLOR_FIELD_DESC);
          oprot.writeI32(struct.color.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_set_tf()) {
        oprot.writeFieldBegin(TF_FIELD_DESC);
        oprot.writeBool(struct.tf);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_b()) {
        oprot.writeFieldBegin(B_FIELD_DESC);
        oprot.writeByte(struct.b);
        oprot.writeFieldEnd();
      }
      if (struct.str != null) {
        if (struct.is_set_str()) {
          oprot.writeFieldBegin(STR_FIELD_DESC);
          oprot.writeString(struct.str);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bin != null) {
        if (struct.is_set_bin()) {
          oprot.writeFieldBegin(BIN_FIELD_DESC);
          oprot.writeBinary(struct.bin);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrimitiveStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PrimitiveStructTupleScheme getScheme() {
      return new PrimitiveStructTupleScheme();
    }
  }

  private static class PrimitiveStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<PrimitiveStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrimitiveStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.is_set_s()) {
        optionals.set(0);
      }
      if (struct.is_set_i()) {
        optionals.set(1);
      }
      if (struct.is_set_l()) {
        optionals.set(2);
      }
      if (struct.is_set_d()) {
        optionals.set(3);
      }
      if (struct.is_set_color()) {
        optionals.set(4);
      }
      if (struct.is_set_tf()) {
        optionals.set(5);
      }
      if (struct.is_set_b()) {
        optionals.set(6);
      }
      if (struct.is_set_str()) {
        optionals.set(7);
      }
      if (struct.is_set_bin()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.is_set_s()) {
        oprot.writeI16(struct.s);
      }
      if (struct.is_set_i()) {
        oprot.writeI32(struct.i);
      }
      if (struct.is_set_l()) {
        oprot.writeI64(struct.l);
      }
      if (struct.is_set_d()) {
        oprot.writeDouble(struct.d);
      }
      if (struct.is_set_color()) {
        oprot.writeI32(struct.color.getValue());
      }
      if (struct.is_set_tf()) {
        oprot.writeBool(struct.tf);
      }
      if (struct.is_set_b()) {
        oprot.writeByte(struct.b);
      }
      if (struct.is_set_str()) {
        oprot.writeString(struct.str);
      }
      if (struct.is_set_bin()) {
        oprot.writeBinary(struct.bin);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrimitiveStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.s = iprot.readI16();
        struct.set_s_isSet(true);
      }
      if (incoming.get(1)) {
        struct.i = iprot.readI32();
        struct.set_i_isSet(true);
      }
      if (incoming.get(2)) {
        struct.l = iprot.readI64();
        struct.set_l_isSet(true);
      }
      if (incoming.get(3)) {
        struct.d = iprot.readDouble();
        struct.set_d_isSet(true);
      }
      if (incoming.get(4)) {
        struct.color = com.liveramp.generative.Color.findByValue(iprot.readI32());
        struct.set_color_isSet(true);
      }
      if (incoming.get(5)) {
        struct.tf = iprot.readBool();
        struct.set_tf_isSet(true);
      }
      if (incoming.get(6)) {
        struct.b = iprot.readByte();
        struct.set_b_isSet(true);
      }
      if (incoming.get(7)) {
        struct.str = iprot.readString();
        struct.set_str_isSet(true);
      }
      if (incoming.get(8)) {
        struct.bin = iprot.readBinary();
        struct.set_bin_isSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

