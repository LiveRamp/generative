/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.liveramp.generative;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-10-03")
public class NestedStruct implements org.apache.thrift.TBase<NestedStruct, NestedStruct._Fields>, java.io.Serializable, Cloneable, Comparable<NestedStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NestedStruct");

  private static final org.apache.thrift.protocol.TField STRCT_FIELD_DESC = new org.apache.thrift.protocol.TField("strct", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField U_FIELD_DESC = new org.apache.thrift.protocol.TField("u", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LONGS_FIELD_DESC = new org.apache.thrift.protocol.TField("longs", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("bytes", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("maps", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NestedStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NestedStructTupleSchemeFactory();

  private PrimitiveStruct strct; // required
  private PrimitiveUnion u; // optional
  private java.util.List<java.lang.Short> longs; // required
  private java.util.Set<java.nio.ByteBuffer> bytes; // required
  private java.util.Map<PrimitiveStruct,PrimitiveUnion> maps; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRCT((short)1, "strct"),
    U((short)2, "u"),
    LONGS((short)3, "longs"),
    BYTES((short)4, "bytes"),
    MAPS((short)5, "maps");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRCT
          return STRCT;
        case 2: // U
          return U;
        case 3: // LONGS
          return LONGS;
        case 4: // BYTES
          return BYTES;
        case 5: // MAPS
          return MAPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.U};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRCT, new org.apache.thrift.meta_data.FieldMetaData("strct", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrimitiveStruct.class)));
    tmpMap.put(_Fields.U, new org.apache.thrift.meta_data.FieldMetaData("u", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrimitiveUnion.class)));
    tmpMap.put(_Fields.LONGS, new org.apache.thrift.meta_data.FieldMetaData("longs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.BYTES, new org.apache.thrift.meta_data.FieldMetaData("bytes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.MAPS, new org.apache.thrift.meta_data.FieldMetaData("maps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrimitiveStruct.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrimitiveUnion.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NestedStruct.class, metaDataMap);
  }

  public NestedStruct() {
  }

  public NestedStruct(
    PrimitiveStruct strct,
    java.util.List<java.lang.Short> longs,
    java.util.Set<java.nio.ByteBuffer> bytes,
    java.util.Map<PrimitiveStruct,PrimitiveUnion> maps)
  {
    this();
    this.strct = strct;
    this.longs = longs;
    this.bytes = bytes;
    this.maps = maps;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NestedStruct(NestedStruct other) {
    if (other.is_set_strct()) {
      this.strct = new PrimitiveStruct(other.strct);
    }
    if (other.is_set_u()) {
      this.u = new PrimitiveUnion(other.u);
    }
    if (other.is_set_longs()) {
      java.util.List<java.lang.Short> __this__longs = new java.util.ArrayList<java.lang.Short>(other.longs);
      this.longs = __this__longs;
    }
    if (other.is_set_bytes()) {
      java.util.Set<java.nio.ByteBuffer> __this__bytes = new java.util.HashSet<java.nio.ByteBuffer>(other.bytes);
      this.bytes = __this__bytes;
    }
    if (other.is_set_maps()) {
      java.util.Map<PrimitiveStruct,PrimitiveUnion> __this__maps = new java.util.HashMap<PrimitiveStruct,PrimitiveUnion>(other.maps.size());
      for (java.util.Map.Entry<PrimitiveStruct, PrimitiveUnion> other_element : other.maps.entrySet()) {

        PrimitiveStruct other_element_key = other_element.getKey();
        PrimitiveUnion other_element_value = other_element.getValue();

        PrimitiveStruct __this__maps_copy_key = new PrimitiveStruct(other_element_key);

        PrimitiveUnion __this__maps_copy_value = new PrimitiveUnion(other_element_value);

        __this__maps.put(__this__maps_copy_key, __this__maps_copy_value);
      }
      this.maps = __this__maps;
    }
  }

  public NestedStruct deepCopy() {
    return new NestedStruct(this);
  }

  @Override
  public void clear() {
    this.strct = null;
    this.u = null;
    this.longs = null;
    this.bytes = null;
    this.maps = null;
  }

  public PrimitiveStruct get_strct() {
    return this.strct;
  }

  public NestedStruct set_strct(PrimitiveStruct strct) {
    this.strct = strct;
    return this;
  }

  public void unset_strct() {
    this.strct = null;
  }

  /** Returns true if field strct is set (has been assigned a value) and false otherwise */
  public boolean is_set_strct() {
    return this.strct != null;
  }

  public void set_strct_isSet(boolean value) {
    if (!value) {
      this.strct = null;
    }
  }

  public PrimitiveUnion get_u() {
    return this.u;
  }

  public NestedStruct set_u(PrimitiveUnion u) {
    this.u = u;
    return this;
  }

  public void unset_u() {
    this.u = null;
  }

  /** Returns true if field u is set (has been assigned a value) and false otherwise */
  public boolean is_set_u() {
    return this.u != null;
  }

  public void set_u_isSet(boolean value) {
    if (!value) {
      this.u = null;
    }
  }

  public int get_longs_size() {
    return (this.longs == null) ? 0 : this.longs.size();
  }

  public java.util.Iterator<java.lang.Short> get_longs_iterator() {
    return (this.longs == null) ? null : this.longs.iterator();
  }

  public void add_to_longs(short elem) {
    if (this.longs == null) {
      this.longs = new java.util.ArrayList<java.lang.Short>();
    }
    this.longs.add(elem);
  }

  public java.util.List<java.lang.Short> get_longs() {
    return this.longs;
  }

  public NestedStruct set_longs(java.util.List<java.lang.Short> longs) {
    this.longs = longs;
    return this;
  }

  public void unset_longs() {
    this.longs = null;
  }

  /** Returns true if field longs is set (has been assigned a value) and false otherwise */
  public boolean is_set_longs() {
    return this.longs != null;
  }

  public void set_longs_isSet(boolean value) {
    if (!value) {
      this.longs = null;
    }
  }

  public int get_bytes_size() {
    return (this.bytes == null) ? 0 : this.bytes.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> get_bytes_iterator() {
    return (this.bytes == null) ? null : this.bytes.iterator();
  }

  public void add_to_bytes(java.nio.ByteBuffer elem) {
    if (this.bytes == null) {
      this.bytes = new java.util.HashSet<java.nio.ByteBuffer>();
    }
    this.bytes.add(elem);
  }

  public java.util.Set<java.nio.ByteBuffer> get_bytes() {
    return this.bytes;
  }

  public NestedStruct set_bytes(java.util.Set<java.nio.ByteBuffer> bytes) {
    this.bytes = bytes;
    return this;
  }

  public void unset_bytes() {
    this.bytes = null;
  }

  /** Returns true if field bytes is set (has been assigned a value) and false otherwise */
  public boolean is_set_bytes() {
    return this.bytes != null;
  }

  public void set_bytes_isSet(boolean value) {
    if (!value) {
      this.bytes = null;
    }
  }

  public int get_maps_size() {
    return (this.maps == null) ? 0 : this.maps.size();
  }

  public void put_to_maps(PrimitiveStruct key, PrimitiveUnion val) {
    if (this.maps == null) {
      this.maps = new java.util.HashMap<PrimitiveStruct,PrimitiveUnion>();
    }
    this.maps.put(key, val);
  }

  public java.util.Map<PrimitiveStruct,PrimitiveUnion> get_maps() {
    return this.maps;
  }

  public NestedStruct set_maps(java.util.Map<PrimitiveStruct,PrimitiveUnion> maps) {
    this.maps = maps;
    return this;
  }

  public void unset_maps() {
    this.maps = null;
  }

  /** Returns true if field maps is set (has been assigned a value) and false otherwise */
  public boolean is_set_maps() {
    return this.maps != null;
  }

  public void set_maps_isSet(boolean value) {
    if (!value) {
      this.maps = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case STRCT:
      if (value == null) {
        unset_strct();
      } else {
        set_strct((PrimitiveStruct)value);
      }
      break;

    case U:
      if (value == null) {
        unset_u();
      } else {
        set_u((PrimitiveUnion)value);
      }
      break;

    case LONGS:
      if (value == null) {
        unset_longs();
      } else {
        set_longs((java.util.List<java.lang.Short>)value);
      }
      break;

    case BYTES:
      if (value == null) {
        unset_bytes();
      } else {
        set_bytes((java.util.Set<java.nio.ByteBuffer>)value);
      }
      break;

    case MAPS:
      if (value == null) {
        unset_maps();
      } else {
        set_maps((java.util.Map<PrimitiveStruct,PrimitiveUnion>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STRCT:
      return get_strct();

    case U:
      return get_u();

    case LONGS:
      return get_longs();

    case BYTES:
      return get_bytes();

    case MAPS:
      return get_maps();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STRCT:
      return is_set_strct();
    case U:
      return is_set_u();
    case LONGS:
      return is_set_longs();
    case BYTES:
      return is_set_bytes();
    case MAPS:
      return is_set_maps();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NestedStruct)
      return this.equals((NestedStruct)that);
    return false;
  }

  public boolean equals(NestedStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_strct = true && this.is_set_strct();
    boolean that_present_strct = true && that.is_set_strct();
    if (this_present_strct || that_present_strct) {
      if (!(this_present_strct && that_present_strct))
        return false;
      if (!this.strct.equals(that.strct))
        return false;
    }

    boolean this_present_u = true && this.is_set_u();
    boolean that_present_u = true && that.is_set_u();
    if (this_present_u || that_present_u) {
      if (!(this_present_u && that_present_u))
        return false;
      if (!this.u.equals(that.u))
        return false;
    }

    boolean this_present_longs = true && this.is_set_longs();
    boolean that_present_longs = true && that.is_set_longs();
    if (this_present_longs || that_present_longs) {
      if (!(this_present_longs && that_present_longs))
        return false;
      if (!this.longs.equals(that.longs))
        return false;
    }

    boolean this_present_bytes = true && this.is_set_bytes();
    boolean that_present_bytes = true && that.is_set_bytes();
    if (this_present_bytes || that_present_bytes) {
      if (!(this_present_bytes && that_present_bytes))
        return false;
      if (!this.bytes.equals(that.bytes))
        return false;
    }

    boolean this_present_maps = true && this.is_set_maps();
    boolean that_present_maps = true && that.is_set_maps();
    if (this_present_maps || that_present_maps) {
      if (!(this_present_maps && that_present_maps))
        return false;
      if (!this.maps.equals(that.maps))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((is_set_strct()) ? 131071 : 524287);
    if (is_set_strct())
      hashCode = hashCode * 8191 + strct.hashCode();

    hashCode = hashCode * 8191 + ((is_set_u()) ? 131071 : 524287);
    if (is_set_u())
      hashCode = hashCode * 8191 + u.hashCode();

    hashCode = hashCode * 8191 + ((is_set_longs()) ? 131071 : 524287);
    if (is_set_longs())
      hashCode = hashCode * 8191 + longs.hashCode();

    hashCode = hashCode * 8191 + ((is_set_bytes()) ? 131071 : 524287);
    if (is_set_bytes())
      hashCode = hashCode * 8191 + bytes.hashCode();

    hashCode = hashCode * 8191 + ((is_set_maps()) ? 131071 : 524287);
    if (is_set_maps())
      hashCode = hashCode * 8191 + maps.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NestedStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(is_set_strct()).compareTo(other.is_set_strct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_strct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strct, other.strct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_u()).compareTo(other.is_set_u());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_u()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.u, other.u);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_longs()).compareTo(other.is_set_longs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_longs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longs, other.longs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_bytes()).compareTo(other.is_set_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytes, other.bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_maps()).compareTo(other.is_set_maps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_maps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maps, other.maps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NestedStruct(");
    boolean first = true;

    sb.append("strct:");
    if (this.strct == null) {
      sb.append("null");
    } else {
      sb.append(this.strct);
    }
    first = false;
    if (is_set_u()) {
      if (!first) sb.append(", ");
      sb.append("u:");
      if (this.u == null) {
        sb.append("null");
      } else {
        sb.append(this.u);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("longs:");
    if (this.longs == null) {
      sb.append("null");
    } else {
      sb.append(this.longs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytes:");
    if (this.bytes == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.bytes, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maps:");
    if (this.maps == null) {
      sb.append("null");
    } else {
      sb.append(this.maps);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (strct == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'strct' was not present! Struct: " + toString());
    }
    if (bytes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bytes' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (strct != null) {
      strct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NestedStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NestedStructStandardScheme getScheme() {
      return new NestedStructStandardScheme();
    }
  }

  private static class NestedStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<NestedStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NestedStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.strct = new PrimitiveStruct();
              struct.strct.read(iprot);
              struct.set_strct_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // U
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.u = new PrimitiveUnion();
              struct.u.read(iprot);
              struct.set_u_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LONGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.longs = new java.util.ArrayList<java.lang.Short>(_list0.size);
                short _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI16();
                  struct.longs.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.set_longs_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.bytes = new java.util.HashSet<java.nio.ByteBuffer>(2*_set3.size);
                java.nio.ByteBuffer _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = iprot.readBinary();
                  struct.bytes.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.set_bytes_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.maps = new java.util.HashMap<PrimitiveStruct,PrimitiveUnion>(2*_map6.size);
                PrimitiveStruct _key7;
                PrimitiveUnion _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = new PrimitiveStruct();
                  _key7.read(iprot);
                  _val8 = new PrimitiveUnion();
                  _val8.read(iprot);
                  struct.maps.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.set_maps_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NestedStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.strct != null) {
        oprot.writeFieldBegin(STRCT_FIELD_DESC);
        struct.strct.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.u != null) {
        if (struct.is_set_u()) {
          oprot.writeFieldBegin(U_FIELD_DESC);
          struct.u.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.longs != null) {
        oprot.writeFieldBegin(LONGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.longs.size()));
          for (short _iter10 : struct.longs)
          {
            oprot.writeI16(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bytes != null) {
        oprot.writeFieldBegin(BYTES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.bytes.size()));
          for (java.nio.ByteBuffer _iter11 : struct.bytes)
          {
            oprot.writeBinary(_iter11);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.maps != null) {
        oprot.writeFieldBegin(MAPS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, struct.maps.size()));
          for (java.util.Map.Entry<PrimitiveStruct, PrimitiveUnion> _iter12 : struct.maps.entrySet())
          {
            _iter12.getKey().write(oprot);
            _iter12.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NestedStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NestedStructTupleScheme getScheme() {
      return new NestedStructTupleScheme();
    }
  }

  private static class NestedStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<NestedStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NestedStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.strct.write(oprot);
      {
        oprot.writeI32(struct.bytes.size());
        for (java.nio.ByteBuffer _iter13 : struct.bytes)
        {
          oprot.writeBinary(_iter13);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.is_set_u()) {
        optionals.set(0);
      }
      if (struct.is_set_longs()) {
        optionals.set(1);
      }
      if (struct.is_set_maps()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.is_set_u()) {
        struct.u.write(oprot);
      }
      if (struct.is_set_longs()) {
        {
          oprot.writeI32(struct.longs.size());
          for (short _iter14 : struct.longs)
          {
            oprot.writeI16(_iter14);
          }
        }
      }
      if (struct.is_set_maps()) {
        {
          oprot.writeI32(struct.maps.size());
          for (java.util.Map.Entry<PrimitiveStruct, PrimitiveUnion> _iter15 : struct.maps.entrySet())
          {
            _iter15.getKey().write(oprot);
            _iter15.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NestedStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.strct = new PrimitiveStruct();
      struct.strct.read(iprot);
      struct.set_strct_isSet(true);
      {
        org.apache.thrift.protocol.TSet _set16 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.bytes = new java.util.HashSet<java.nio.ByteBuffer>(2*_set16.size);
        java.nio.ByteBuffer _elem17;
        for (int _i18 = 0; _i18 < _set16.size; ++_i18)
        {
          _elem17 = iprot.readBinary();
          struct.bytes.add(_elem17);
        }
      }
      struct.set_bytes_isSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.u = new PrimitiveUnion();
        struct.u.read(iprot);
        struct.set_u_isSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list19 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.longs = new java.util.ArrayList<java.lang.Short>(_list19.size);
          short _elem20;
          for (int _i21 = 0; _i21 < _list19.size; ++_i21)
          {
            _elem20 = iprot.readI16();
            struct.longs.add(_elem20);
          }
        }
        struct.set_longs_isSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.maps = new java.util.HashMap<PrimitiveStruct,PrimitiveUnion>(2*_map22.size);
          PrimitiveStruct _key23;
          PrimitiveUnion _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = new PrimitiveStruct();
            _key23.read(iprot);
            _val24 = new PrimitiveUnion();
            _val24.read(iprot);
            struct.maps.put(_key23, _val24);
          }
        }
        struct.set_maps_isSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

