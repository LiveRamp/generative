/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.liveramp.generative;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class ComplexUnion extends org.apache.thrift.TUnion<ComplexUnion, ComplexUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComplexUnion");
  private static final org.apache.thrift.protocol.TField STCT_FIELD_DESC = new org.apache.thrift.protocol.TField("stct", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField UN_FIELD_DESC = new org.apache.thrift.protocol.TField("un", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LONGS_FIELD_DESC = new org.apache.thrift.protocol.TField("longs", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField STRS_FIELD_DESC = new org.apache.thrift.protocol.TField("strs", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField ENUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("enums", org.apache.thrift.protocol.TType.MAP, (short)5);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STCT((short)1, "stct"),
    UN((short)2, "un"),
    LONGS((short)3, "longs"),
    STRS((short)4, "strs"),
    ENUMS((short)5, "enums");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STCT
          return STCT;
        case 2: // UN
          return UN;
        case 3: // LONGS
          return LONGS;
        case 4: // STRS
          return STRS;
        case 5: // ENUMS
          return ENUMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STCT, new org.apache.thrift.meta_data.FieldMetaData("stct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiNestedStruct.class)));
    tmpMap.put(_Fields.UN, new org.apache.thrift.meta_data.FieldMetaData("un", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrimitiveUnion.class)));
    tmpMap.put(_Fields.LONGS, new org.apache.thrift.meta_data.FieldMetaData("longs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.STRS, new org.apache.thrift.meta_data.FieldMetaData("strs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ENUMS, new org.apache.thrift.meta_data.FieldMetaData("enums", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Color.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrimitiveStruct.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComplexUnion.class, metaDataMap);
  }

  public ComplexUnion() {
    super();
  }

  public ComplexUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public ComplexUnion(ComplexUnion other) {
    super(other);
  }
  public ComplexUnion deepCopy() {
    return new ComplexUnion(this);
  }

  public static ComplexUnion stct(MultiNestedStruct value) {
    ComplexUnion x = new ComplexUnion();
    x.set_stct(value);
    return x;
  }

  public static ComplexUnion un(PrimitiveUnion value) {
    ComplexUnion x = new ComplexUnion();
    x.set_un(value);
    return x;
  }

  public static ComplexUnion longs(java.util.List<java.lang.Long> value) {
    ComplexUnion x = new ComplexUnion();
    x.set_longs(value);
    return x;
  }

  public static ComplexUnion strs(java.util.Set<java.lang.String> value) {
    ComplexUnion x = new ComplexUnion();
    x.set_strs(value);
    return x;
  }

  public static ComplexUnion enums(java.util.Map<Color,PrimitiveStruct> value) {
    ComplexUnion x = new ComplexUnion();
    x.set_enums(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case STCT:
        if (value instanceof MultiNestedStruct) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type MultiNestedStruct for field 'stct', but got " + value.getClass().getSimpleName());
      case UN:
        if (value instanceof PrimitiveUnion) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type PrimitiveUnion for field 'un', but got " + value.getClass().getSimpleName());
      case LONGS:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.Long> for field 'longs', but got " + value.getClass().getSimpleName());
      case STRS:
        if (value instanceof java.util.Set) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.Set<java.lang.String> for field 'strs', but got " + value.getClass().getSimpleName());
      case ENUMS:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.Map<Color,PrimitiveStruct> for field 'enums', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case STCT:
          if (field.type == STCT_FIELD_DESC.type) {
            MultiNestedStruct stct;
            stct = new MultiNestedStruct();
            stct.read(iprot);
            return stct;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case UN:
          if (field.type == UN_FIELD_DESC.type) {
            PrimitiveUnion un;
            un = new PrimitiveUnion();
            un.read(iprot);
            return un;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LONGS:
          if (field.type == LONGS_FIELD_DESC.type) {
            java.util.List<java.lang.Long> longs;
            {
              org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
              longs = new java.util.ArrayList<java.lang.Long>(_list26.size);
              long _elem27;
              for (int _i28 = 0; _i28 < _list26.size; ++_i28)
              {
                _elem27 = iprot.readI64();
                longs.add(_elem27);
              }
              iprot.readListEnd();
            }
            return longs;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRS:
          if (field.type == STRS_FIELD_DESC.type) {
            java.util.Set<java.lang.String> strs;
            {
              org.apache.thrift.protocol.TSet _set29 = iprot.readSetBegin();
              strs = new java.util.HashSet<java.lang.String>(2*_set29.size);
              java.lang.String _elem30;
              for (int _i31 = 0; _i31 < _set29.size; ++_i31)
              {
                _elem30 = iprot.readString();
                strs.add(_elem30);
              }
              iprot.readSetEnd();
            }
            return strs;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ENUMS:
          if (field.type == ENUMS_FIELD_DESC.type) {
            java.util.Map<Color,PrimitiveStruct> enums;
            {
              org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
              enums = new java.util.EnumMap<Color,PrimitiveStruct>(Color.class);
              Color _key33;
              PrimitiveStruct _val34;
              for (int _i35 = 0; _i35 < _map32.size; ++_i35)
              {
                _key33 = com.liveramp.generative.Color.findByValue(iprot.readI32());
                _val34 = new PrimitiveStruct();
                _val34.read(iprot);
                if (_key33 != null)
                {
                  enums.put(_key33, _val34);
                }
              }
              iprot.readMapEnd();
            }
            return enums;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case STCT:
        MultiNestedStruct stct = (MultiNestedStruct)value_;
        stct.write(oprot);
        return;
      case UN:
        PrimitiveUnion un = (PrimitiveUnion)value_;
        un.write(oprot);
        return;
      case LONGS:
        java.util.List<java.lang.Long> longs = (java.util.List<java.lang.Long>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, longs.size()));
          for (long _iter36 : longs)
          {
            oprot.writeI64(_iter36);
          }
          oprot.writeListEnd();
        }
        return;
      case STRS:
        java.util.Set<java.lang.String> strs = (java.util.Set<java.lang.String>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, strs.size()));
          for (java.lang.String _iter37 : strs)
          {
            oprot.writeString(_iter37);
          }
          oprot.writeSetEnd();
        }
        return;
      case ENUMS:
        java.util.Map<Color,PrimitiveStruct> enums = (java.util.Map<Color,PrimitiveStruct>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, enums.size()));
          for (java.util.Map.Entry<Color, PrimitiveStruct> _iter38 : enums.entrySet())
          {
            oprot.writeI32(_iter38.getKey().getValue());
            _iter38.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case STCT:
          MultiNestedStruct stct;
          stct = new MultiNestedStruct();
          stct.read(iprot);
          return stct;
        case UN:
          PrimitiveUnion un;
          un = new PrimitiveUnion();
          un.read(iprot);
          return un;
        case LONGS:
          java.util.List<java.lang.Long> longs;
          {
            org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
            longs = new java.util.ArrayList<java.lang.Long>(_list39.size);
            long _elem40;
            for (int _i41 = 0; _i41 < _list39.size; ++_i41)
            {
              _elem40 = iprot.readI64();
              longs.add(_elem40);
            }
            iprot.readListEnd();
          }
          return longs;
        case STRS:
          java.util.Set<java.lang.String> strs;
          {
            org.apache.thrift.protocol.TSet _set42 = iprot.readSetBegin();
            strs = new java.util.HashSet<java.lang.String>(2*_set42.size);
            java.lang.String _elem43;
            for (int _i44 = 0; _i44 < _set42.size; ++_i44)
            {
              _elem43 = iprot.readString();
              strs.add(_elem43);
            }
            iprot.readSetEnd();
          }
          return strs;
        case ENUMS:
          java.util.Map<Color,PrimitiveStruct> enums;
          {
            org.apache.thrift.protocol.TMap _map45 = iprot.readMapBegin();
            enums = new java.util.EnumMap<Color,PrimitiveStruct>(Color.class);
            Color _key46;
            PrimitiveStruct _val47;
            for (int _i48 = 0; _i48 < _map45.size; ++_i48)
            {
              _key46 = com.liveramp.generative.Color.findByValue(iprot.readI32());
              _val47 = new PrimitiveStruct();
              _val47.read(iprot);
              if (_key46 != null)
              {
                enums.put(_key46, _val47);
              }
            }
            iprot.readMapEnd();
          }
          return enums;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case STCT:
        MultiNestedStruct stct = (MultiNestedStruct)value_;
        stct.write(oprot);
        return;
      case UN:
        PrimitiveUnion un = (PrimitiveUnion)value_;
        un.write(oprot);
        return;
      case LONGS:
        java.util.List<java.lang.Long> longs = (java.util.List<java.lang.Long>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, longs.size()));
          for (long _iter49 : longs)
          {
            oprot.writeI64(_iter49);
          }
          oprot.writeListEnd();
        }
        return;
      case STRS:
        java.util.Set<java.lang.String> strs = (java.util.Set<java.lang.String>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, strs.size()));
          for (java.lang.String _iter50 : strs)
          {
            oprot.writeString(_iter50);
          }
          oprot.writeSetEnd();
        }
        return;
      case ENUMS:
        java.util.Map<Color,PrimitiveStruct> enums = (java.util.Map<Color,PrimitiveStruct>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, enums.size()));
          for (java.util.Map.Entry<Color, PrimitiveStruct> _iter51 : enums.entrySet())
          {
            oprot.writeI32(_iter51.getKey().getValue());
            _iter51.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case STCT:
        return STCT_FIELD_DESC;
      case UN:
        return UN_FIELD_DESC;
      case LONGS:
        return LONGS_FIELD_DESC;
      case STRS:
        return STRS_FIELD_DESC;
      case ENUMS:
        return ENUMS_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public MultiNestedStruct get_stct() {
    if (getSetField() == _Fields.STCT) {
      return (MultiNestedStruct)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'stct' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_stct(MultiNestedStruct value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STCT;
    value_ = value;
  }

  public PrimitiveUnion get_un() {
    if (getSetField() == _Fields.UN) {
      return (PrimitiveUnion)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'un' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_un(PrimitiveUnion value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.UN;
    value_ = value;
  }

  public java.util.List<java.lang.Long> get_longs() {
    if (getSetField() == _Fields.LONGS) {
      return (java.util.List<java.lang.Long>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'longs' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_longs(java.util.List<java.lang.Long> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.LONGS;
    value_ = value;
  }

  public java.util.Set<java.lang.String> get_strs() {
    if (getSetField() == _Fields.STRS) {
      return (java.util.Set<java.lang.String>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'strs' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_strs(java.util.Set<java.lang.String> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STRS;
    value_ = value;
  }

  public java.util.Map<Color,PrimitiveStruct> get_enums() {
    if (getSetField() == _Fields.ENUMS) {
      return (java.util.Map<Color,PrimitiveStruct>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'enums' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_enums(java.util.Map<Color,PrimitiveStruct> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ENUMS;
    value_ = value;
  }

  public boolean is_set_stct() {
    return setField_ == _Fields.STCT;
  }


  public boolean is_set_un() {
    return setField_ == _Fields.UN;
  }


  public boolean is_set_longs() {
    return setField_ == _Fields.LONGS;
  }


  public boolean is_set_strs() {
    return setField_ == _Fields.STRS;
  }


  public boolean is_set_enums() {
    return setField_ == _Fields.ENUMS;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof ComplexUnion) {
      return equals((ComplexUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(ComplexUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(ComplexUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
